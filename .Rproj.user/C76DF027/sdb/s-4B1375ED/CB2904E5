{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(Quandl)\nlibrary(quadprog)\nlibrary(XLConnect)\n\nsource(\"Optimal_Portfolio.R\")\n\n\nshinyServer(function(input, output, clientData, session) {\n  \n  observe({\n    if(input$nextStep > 0){\n      session$sendCustomMessage(\"myCallbackHandler\", \"1\")\n    }\n  })\n  \n  stock_expectReturn <<- eventReactive(input$do1, {\n    c(0.08 + 0.25 * rnorm(length(stock_names), 0, 0.4))\n  })\n  \n  observe({\n    \n    if(as.numeric(input$do1) == 0){\n      \n      output$stockChoice <- renderUI({\n        \n        if (input$Exchange == \"ASX\"){\n          stock_names <<- c(\"AAC\", \"AAD\", \"ABC\", \"ABP\", \"AGI\", \"AIO\", \"ALL\", \"AMC\", \"AMP\", \"ANN\", \"ANZ\", \"APA\", \"APN\", \"ARI\", \"ASX\", \"AWC\", \"AWE\", \"BEN\", \"BGA\", \"BHP\", \"BKN\", \"BLD\", \"BOQ\", \"BPT\", \"BRG\", \"BSL\", \"BWP\", \"BXB\", \"CAB\", \"CBA\", \"CCL\", \"CCP\", \"CDD\", \"CGF\", \"CMW\", \"COH\", \"CPU\", \"CQR\", \"CSL\", \"CSR\", \"CTD\", \"CTX\", \"CWN\", \"DLX\",  \"DMP\", \"DOW\", \"DUE\", \"DXS\", \"EVN\", \"FBU\", \"FLT\", \"FMG\", \"FPH\", \"FXJ\", \"FXL\", \"GEM\", \"GMG\", \"GNC\", \"GOZ\", \"GPT\", \"GUD\", \"GWA\", \"GXL\", \"HGG\", \"HVN\", \"IAG\", \"IFL\", \"IGO\", \"ILU\", \"IOF\", \"IPL\", \"IRE\", \"IVC\", \"JBH\", \"JHX\", \"LLC\", \"LNG\", \"MFG\", \"MGR\", \"MIN\", \"MMS\", \"MND\", \"MQA\", \"MQG\", \"MSB\", \"MTS\", \"MYR\", \"MYX\", \"NAB\", \"NCM\", \"NST\", \"NUF\", \"NVT\", \"NWS\", \"ORG\", \"ORI\", \"OSH\", \"OZL\", \"PBG\", \"PMV\", \"PPT\", \"PRG\", \"PRY\", \"PTM\", \"QAN\", \"QBE\", \"QUB\", \"REA\", \"RFG\", \"RHC\", \"RIO\", \"RMD\", \"RRL\", \"SAI\", \"SBM\", \"SEK\", \"SFR\", \"SGM\", \"SGP\", \"SHL\", \"SHV\", \"SIP\", \"SKC\", \"SKI\", \"SKT\", \"SRX\", \"STO\", \"SUL\", \"SUN\", \"SVW\", \"SWM\", \"SXL\", \"SYD\", \"SYR\", \"TAH\", \"TCL\", \"TGR\", \"TLS\", \"TME\", \"TNE\",  \"TPM\", \"TTS\", \"TWE\", \"VOC\", \"VRL\", \"WBC\", \"WES\", \"WHC\", \"WOR\", \"WOW\", \"WPL\", \"WSA\")\n          stockChoice <- c()\n          stock_datacode <<- c()\n          for (i in 1:length(stock_names)){\n            stockChoice[stock_names[i]] <- stock_names[i] \n            #list of stocks'code used to retrieve the data from Quandl\n            stock_datacode[i] <<- paste0(stock_names[i], \".AX\")\n          }\n        }\n        if(input$Exchange == \"NYSE\"){\n          stock_names <<- c(\"AAPL\",\"AXP\", \"BA\", \"CAT\", \"CSCO\", \"CVX\", \"DD\", \"DIS\", \"GE\", \"GS\", \"HD\", \"IBM\", \"INTC\", \"JNJ\", \"JPM\", \"KO\", \"MCD\", \"MMM\", \"MRK\", \"MSFT\", \"NKE\", \"PFE\", \"PG\", \"TRV\", \"UNH\", \"UTX\", \"V\", \"VZ\", \"WMT\", \"XOM\")\n          stockChoice <- c(stock_names)\n          stock_datacode <<- c(stock_names)\n        } \n        selectInput(\"Stocks\", \n                    \"Stocks:\", \n                    stockChoice,\n                    selected = stock_names[1:4], multiple = TRUE )\n      })\n      \n      output$indexChoices <- renderUI({\n        if (input$Exchange == \"ASX\"){\n          index_names <<- c(\"S&P/ASX 20\", \"S&P/ASX 50\", \"S&P/ASX 100\", \"S&P/ASX 200\")\n          indexChoice <- c(index_names)\n          index_datacode <<- c(\"%5EATLI\", \"%5EAFLI\", \"%5EATOI\", \"%5EAXJO\" )\n        }\n        if(input$Exchange == \"NYSE\"){\n          index_names <<- c(\"DOW JONES\")\n          indexChoice <- c(index_names)\n          index_datacode <<- c(\"^DJI\")\n        } \n        selectInput(\"Indices\", \n                    \"Index:\", \n                    indexChoice)\n      })\n    }\n    \n    #random Expected Returns generation\n    #in this section we observe all the inputs happening on the left panel of the page and display the error messages accordingly\n    #we check that at least two stocks are selected\n    check1 <- reactive({ \n      validate(\n        need(length(input$Stocks) >= 2, \"- Please select at least two Stocks\")\n      )\n    })\n    output$alert1 <- renderText(check1())\n    #we check that the Risk free rate is indicated\n    check2 <- reactive({ \n      validate(\n        need(!is.na(input$risk_free), \"- Please indicate the risk free rate\")\n      )\n    })\n    output$alert2 <- renderText(check2())\n    #we check that the range for the dates longer than 5 years\n    check3 <- reactive({ \n      validate(\n        need(difftime(input$dateRange[2], input$dateRange[1], \"years\")/365 >= 5, \"- The period to consider for historical data must be at least 5 years\")\n      )\n    })\n    output$alert3 <- renderText(check3())\n    #we check that the Risk free rate is indicated\n    check4 <- reactive({ \n      validate(\n        need(!is.na(input$Exchange), \"- Please select a Stock Exchange\")\n      )\n    }) \n    output$alert4 <- renderText(check4())\n    \n    #in this part we define which action to perform once the launch button is pressed\n    observeEvent(input$do1,{\n      #if less than two stocks are selected then the program doesn't do anything, if the risk free rate isn't indicated then the program doesn't do anything, if the \"Inputs\" option is selected and not all expected returns are indicated then the program doesn't do anything\n      withProgress(message = \"Computing\", value = 0, {\n        if(length(input$Stocks) < 2){\n          \n        }else if(is.na(input$Exchange)){ \n          \n        }else if(difftime(input$dateRange[2], input$dateRange[1], \"years\")/365 < 5){\n          \n        }else{\n          # if the form is completely filled the pregram then proceeds with the following\n          \n          indices_index <- match(input$Indices, index_names)\n          index_name <<- input$Indices\n          fixedDateRange <<- input$dateRange\n          fixedShortChoice <<- input$shortChoice1\n          index <- match(input$Stocks, stock_names)\n          data <- c(stock_datacode[index], index_datacode[indices_index])\n          asset_names <<-stock_names[index]\n          yahoo_url <- createURL(data, substr(fixedDateRange[[1]], 1, 4), substr(fixedDateRange[[1]], 6, 7), substr(fixedDateRange[[1]], 9, 10), \"00\", \"00\", \"00\", \"00\", \"AES\", substr(fixedDateRange[[2]], 1, 4), substr(fixedDateRange[[2]], 6, 7), substr(fixedDateRange[[2]], 9, 10), \"00\", \"00\", \"00\", \"00\", \"AES\")\n          rawData <<- getRawData(yahoo_url)\n          mydata <<- getData(rawData)\n          #we get the actual data range given by the asset that has the less data\n          actual_range <<- getActualRange(mydata)\n          #we calculate the arithmetic returns for each stocks\n          myReturns <<- getMonthlyReturns(mydata)\n          #we calculate the covariance matrix of all the selected stocks\n          cov_matrix <<- getCovMatr(myReturns)\n          #we define the expected returns to use in the computation according to the user's choice\n          if(input$choice1 == 1){\n            Expt_Ret <<- stock_expectReturn()[index]\n          }else if(input$choice1 == 2){\n            my_stock_data <- mydata\n            my_stock_data[[length(my_stock_data)]] <- NULL\n            Expt_Ret <<- getHistoricalReturn(getYearlyReturns(my_stock_data))\n          }\n          stocks_cov_matrix <<- cov_matrix[1 : (nrow(cov_matrix) - 1), 1 : (ncol(cov_matrix) - 1)]\n          #we calculate the optimal portfolio for the the stocks selected\n          Optimal <<- OptimalPortfolio(Expt_Ret, stocks_cov_matrix, input$shortChoice1)\n          #we calculate the Minimum Variance Portfolio\n          MinVar <<- getMinVarPort(Expt_Ret, stocks_cov_matrix, input$shortChoice1)\n          #we calculate the efficient portfolio\n          Effi <<- getEfficientPort(Expt_Ret, stocks_cov_matrix, input$shortChoice1, MinVar[[2]])\n          #we compute several portfolios on the efficient frontier according to the two fund separation theorem\n          Frontier <<- getEffFrontier(MinVar[[1]], Effi[[1]], Expt_Ret, stocks_cov_matrix, input$shortChoice1, MinVar[[2]])\n          #we calculate the Capital Allocation Line\n          \n          output$results <- renderPlot({\n            #we draw the efficient frontier\n            plot(Frontier[[2]], Frontier[[1]], type=\"l\", xlim=c((min(Frontier[[2]]) - 0.01), max(Frontier[[2]])), ylim = c((min(Frontier[[1]]) - 0.01), max(Frontier[[1]])), main = \"Efficient Frontier\", xlab = \"Global Risk\", ylab = \"Expected Return\", lwd = 2, xaxs = \"i\", yaxs = \"i\")\n            #we draw the optimal portfolio\n            points(Optimal[[3]], Optimal[[2]], pch=21, bg=\"blue\", cex=1.3)\n            #we draw the Minimum Variance Portfolio\n            points(MinVar[[3]], MinVar[[2]], pch=21, bg=\"red\", cex=1.3)\n            #we draw a legend for the graph\n            legend(x = \"bottomright\", c(\"Optimal Portfolio of Risky Assets\", \"Minimum Variance Portfolio\", \"Efficient Frontier\"), pch = c(19, 19, NA), lty = c(0, 0, 1), col = c(\"blue\", \"red\", \"black\"))\n          })      \n          \n          output$displayOpt <- renderUI({\n            h2(\"Report\")\n          })\n          \n          #we a table summarizing all the assets present in the complete portfolio, their weight and individual expected return\n          tableOpt <- reactive({\n            table1 <- data.frame()\n            table1 <- data.frame(Stocks = asset_names, Weights1 = as.character(round(MinVar[[1]] * 100, 2)), Weights2 = as.character(round(Optimal[[1]] * 100, 2)))\n            colnames(table1) <- c(\"Assets\", \"Weight in the Min Var Port.(%)\", \"Weight in the Optimal Port.(%)\")\n            table1\n          })\n          \n          tableAssetsOpt <- reactive({\n            tableAssets <- data.frame(rbind(round(Expt_Ret * 100, 2), round(sqrt(diag(stocks_cov_matrix)) * 100, 2)))\n            row_names <- c(\"Expected Return (%)\", \"Risk (%)\")\n            tableAssets <- cbind(row_names, tableAssets)\n            colnames(tableAssets) <- c(\"Info\", asset_names)\n            tableAssets\n          })\n          \n          output$Opt <- renderDataTable({\n            tableOpt()\n          })\n          output$assetsTableOpt <- renderDataTable({\n            tableAssetsOpt()\n          })\n          output$covarTableOpt <- renderDataTable({\n            covar <- round(cov_matrix, 3)\n            covar <- cbind(c(asset_names, index_names), covar)\n            colnames(covar) <- c(\"\", c(asset_names, index_name))\n            covar\n          })\n          output$dateRange1 <- renderText({\n            paste(\"Period :\", actual_range[[1]], \"to\", actual_range[[2]])\n          })\n          output$shortSelling1 <- renderText({\n            paste(\"Short Selling :\", fixedShortChoice)\n          })\n          \n          output$optExpRet1 <- renderText({\n            paste(\"Expected Return :\", round(Optimal[[2]] * 100, 2), \"%\")\n          })\n          \n          output$optRisk1 <- renderText({\n            paste(\"Global Risk :\", round(Optimal[[3]] * 100, 2), \"%\")\n          })\n          \n          output$benchExpRet1 <- renderText({\n            paste(\"Expected Return :\", round(getHistoricalReturn(getYearlyReturns(list(mydata[[length(mydata)]]))) * 100, 2), \"%\")\n          })\n          \n          #we display the complete portfolio's risk\n          output$benchRisk1 <- renderText({\n            paste(\"Global Risk :\", round(sqrt(diag(cov_matrix)[length(diag(cov_matrix))]) * 100, 2), \"%\")\n          })\n          \n          output$minExpRet1 <- renderText({\n            paste(\"Expected Return :\", round(MinVar[[2]] * 100, 2), \"%\")\n          })\n          #we display the minvar portfolio's risk\n          output$minRisk1 <- renderText({\n            paste(\"Global Risk :\", round(MinVar[[3]] * 100, 2), \"%\")\n          })\n          \n          output$download1 <- downloadHandler(\"Assets_Data.csv\", content = function(con){\n            write.csv(rawData, con)\n          })\n        }\n      })\n    })\n    observeEvent(input$do2, {\n      withProgress(message = \"Computing\", value = 0, {\n        if (is.na(input$risk_free)){\n          \n        } else if (is.na(input$propor)){\n          \n        } else {\n          \n          Rf <- input$risk_free / 100\n          \n          CAL <<- getCapitalAssetLine(Optimal[[2]], Rf, Optimal[[3]])\n          \n          observe({\n            propor <- input$propor / 100\n            comp_portfolio <- getCompletePortfolio(propor, Rf, Optimal[[2]], Optimal[[3]], Optimal[[1]], Expt_Ret, stocks_cov_matrix)\n            \n            output$resultsComp <- renderPlot({\n              #we draw the efficient frontier\n              plot(Frontier[[2]], Frontier[[1]], type=\"l\", xlim=c(min(0, min(Frontier[[2]])), max(Frontier[[2]])), ylim = c(min(0, min(Frontier[[1]])), max(Frontier[[1]])), main = \"Efficient Frontier\", xlab = \"Global Risk\", ylab = \"Expected Return\", lwd = 2, xaxs = \"i\", yaxs = \"i\")\n              #we draw the optimal portfolio\n              points(Optimal[[3]], Optimal[[2]], pch=21, bg=\"blue\", cex=1.3)\n              #we draw the Minimum Variance Portfolio\n              points(MinVar[[3]], MinVar[[2]], pch=21, bg=\"red\", cex=1.3)\n              #we draw the risk free asset\n              points(0, Rf, pch=21, bg=\"green\", cex=1.3)\n              #we draw capital allocation line\n              lines(CAL[[1]], CAL[[2]], col=\"green\")\n              #we draw the complete portfolio\n              points(comp_portfolio[[3]], comp_portfolio[[2]], pch=21, bg=\"black\", cex=1.3)\n              #we draw a legend for the graph\n              legend(x = \"bottomright\", c(\"Optimal Portfolio of Risky Assets\", \"Minimum Variance Portfolio\", \"Risk Free Rate\", \"Complete Portfolio\", \"Capital Allocation Line\", \"Efficient Frontier\"), pch = c(19, 19, 19, 19, NA, NA), lty = c(0, 0, 0, 0, 1, 1), col = c(\"blue\", \"red\", \"green\", \"black\", \"green\", \"black\"))\n            })\n            \n            output$displayComp <- renderUI({\n              h2(\"Report\")\n            })\n            \n            output$dateRangeComp <- renderText({\n              paste(\"Period :\", actual_range[[1]], \"to\", actual_range[[2]])\n            })\n            output$shortSellingComp <- renderText({\n              paste(\"Short Selling :\", fixedShortChoice)\n            })\n            \n            #we display the complete portfolio's expected return\n            output$compExpRet1 <- renderText({\n              paste(\"Expected Return :\", round(comp_portfolio[[2]] * 100, 2), \"%\")\n            })\n            #we display the complete portfolio's risk\n            output$compRisk1 <- renderText({\n              paste(\"Global Risk :\", round(comp_portfolio[[3]] * 100, 2), \"%\")\n            })\n            \n            output$benchExpRet2 <- renderText({\n              paste(\"Expected Return :\", round(getHistoricalReturn(getYearlyReturns(list(mydata[[length(mydata)]]))) * 100, 2), \"%\")\n            })\n            \n            output$benchRisk2 <- renderText({\n              paste(\"Global Risk :\", round(sqrt(diag(cov_matrix)[length(diag(cov_matrix))]) * 100, 2), \"%\")\n            })\n            \n            tableComp <- reactive({\n              table1 <- data.frame()\n              table1 <- data.frame(Stocks = c(\"Risk Free Asset\", asset_names), Weights2 = c(propor * 100, as.character(round(comp_portfolio[[1]] * 100, 2))))\n              colnames(table1) <- c(\"Assets\", \"Weight in the Complete Port.(%)\")\n              table1\n            })\n            \n            output$comp <- renderDataTable({\n              tableComp()\n            })\n            \n            tableAssetsComp <- reactive({\n              tableAssets <- data.frame(rbind(round(c(Rf, Expt_Ret) * 100, 2), round(c(0, sqrt(diag(stocks_cov_matrix))) * 100, 2)))\n              row_names <- c(\"Expected Return (%)\", \"Risk (%)\")\n              tableAssets <- cbind(row_names, tableAssets)\n              colnames(tableAssets) <- c(\"Info\", c(\"Risk Free Asset\",asset_names))\n              tableAssets\n            })\n            \n            output$assetsTableComp <- renderDataTable({\n              tableAssetsComp()\n            })\n            \n            output$covarTableComp <- renderDataTable({\n              covar <- round(cov_matrix, 3)\n              covar <- cbind(c(asset_names, index_name), covar)\n              colnames(covar) <- c(\"\", c(asset_names, index_name))\n              covar\n            })\n            \n            output$download2 <- downloadHandler(\"Assets_Data.csv\", content = function(con){\n              write.csv(rawData, con)\n            })\n            \n          })\n        }\n      })\n    })\n    \n    if(input$inTab == 3){\n      Rf_file <- 0\n      checkInput <- reactive({ \n        validate(need(!is.null(input$inputData), \"Please Input your data\")\n        )\n      })\n      output$alertFile <- renderText(checkInput())\n      \n      if(!is.null(input$inputData)){\n        data <- readWorksheet(loadWorkbook(input$inputData$datapath), sheet = 1, header = TRUE)\n        corr <- readWorksheet(loadWorkbook(input$inputData$datapath), sheet = 2, header = TRUE)\n        stock_names_files <- data[, 1]\n        AllStock_expectReturn <- data[, 2]/100\n        stock_variance_file <- data[, 3]/100\n        cov_matrix_file <- matrix(nrow = length(AllStock_expectReturn) - 1)\n        for(i in 2:length(stock_variance_file)){\n          cov <- c()\n          for (j in 2:length(stock_variance_file)){\n            cov <- append(cov, sqrt(stock_variance_file[i]) * sqrt(stock_variance_file[j]))\n          }\n          col <- diag(cov) %*% corr[, i]\n          cov_matrix_file <- cbind(cov_matrix_file, col)\n        }\n        cov_matrix_file <- cov_matrix_file[, 2:ncol(cov_matrix_file)]\n        \n        observeEvent(input$do3, {\n          withProgress(message = \"Computing\", value = 0, {\n            fixedShortChoice_file <- input$shortChoice2\n            Rf_file <- AllStock_expectReturn[1]\n            stock_expectReturn <- AllStock_expectReturn[2:length(AllStock_expectReturn)]\n            Optimal_file <<- OptimalPortfolio(stock_expectReturn, cov_matrix_file, input$shortChoice2)\n            #we calculate the Minimum Variance Portfolio\n            MinVar_file <<- getMinVarPort(stock_expectReturn, cov_matrix_file, input$shortChoice2)\n            #We calculate the efficient portfolià\n            Effi_file <<- getEfficientPort(stock_expectReturn, cov_matrix_file, input$shortChoice2, MinVar_file[[2]])\n            #we compute several portfolios on the efficient frontier according to the two fund separation theorem\n            Frontier_file <<- getEffFrontier(MinVar_file[[1]], Effi_file[[1]], stock_expectReturn, cov_matrix_file, input$shortChoice2, MinVar_file[[2]])\n            #we calculate the Capital Allocation Line\n            CAL_file <<- getCapitalAssetLine(Optimal_file[[2]], Rf_file, Optimal_file[[3]])\n            observe({\n              propor <- input$RiskFreeProp2 / 100\n              comp_portfolio <- getCompletePortfolio(propor, Rf_file, Optimal_file[[2]], Optimal_file[[3]], Optimal_file[[1]], stock_expectReturn, cov_matrix_file)\n              output$results2 <- renderPlot({\n                #we draw the efficient frontier\n                plot(Frontier_file[[2]], Frontier_file[[1]], type=\"l\", xlim=c(min(0, min(Frontier_file[[2]])), max(Frontier_file[[2]])), ylim = c(min(0, min(Frontier_file[[1]])), max(Frontier_file[[1]])), main = \"Efficient Frontier\", xlab = \"Global Risk\", ylab = \"Expected Return\", lwd = 2, xaxs = \"i\", yaxs = \"i\")\n                #we draw the optimal portfolio\n                points(Optimal_file[[3]], Optimal_file[[2]], pch=21, bg=\"blue\", cex=1.3)\n                #we draw the Minimum Variance Portfolio\n                points(MinVar_file[[3]], MinVar_file[[2]], pch=21, bg=\"red\", cex=1.3)\n                #we draw the risk free asset\n                points(0, Rf_file, pch=21, bg=\"green\", cex=1.3)\n                #we draw capital allocation line\n                lines(CAL_file[[1]], CAL_file[[2]], col=\"green\")\n                #we draw the complete portfolio\n                points(comp_portfolio[[3]], comp_portfolio[[2]], pch=21, bg=\"black\", cex=1.3)\n                #we draw a legend for the graph\n                legend(x = \"bottomright\", c(\"Optimal Portfolio of Risky Assets\", \"Minimum Variance Portfolio\", \"Risk Free Rate\", \"Complete Portfolio\", \"Capital Allocation Line\"), pch = c(19, 19, 19, 19, NA), lty = c(0, 0, 0, 0, 1), col = c(\"blue\", \"red\", \"green\", \"black\", \"green\"))\n              })\n              #we display the complete portfolio's expected return\n              output$expRet2 <- renderText({\n                paste(\"Expected Return :\", round(comp_portfolio[[2]] * 100, 2), \"%\")\n              })\n              #we display the complete portfolio's risk\n              output$Risk2 <- renderText({\n                paste(\"Global Risk :\", round(comp_portfolio[[3]] * 100, 2), \"%\")\n              })\n              #we a table summarizing all the assets present in the complete portfolio, their weight and individual expected return\n              table2 <- reactive({\n                table2 <- data.frame(Stocks = stock_names_files, Weights2 = as.character(c(0, round(MinVar_file[[1]] * 100, 2))), Weights3 = as.character(c(0, round(Optimal_file[[1]] * 100, 2))), Weights1 = as.character(c(round(propor * 100, 2), round(comp_portfolio[[1]] * 100, 2))))\n                colnames(table2) <- c(\"Stock\", \"Weight in the Min Var Port.(%)\", \"Weight in the Optimal Port.(%)\", \"Weight in the Complete Port.(%)\")\n                table2\n              })\n              output$assets2 <- renderDataTable({\n                table2()\n              })\n              output$shortSelling2 <- renderText({\n                paste(\"Short Selling :\", fixedShortChoice_file)\n              })\n              output$minExpRet2 <- renderText({\n                paste(\"Expected Return :\", round(MinVar_file[[2]] * 100, 2), \"%\")\n              })\n              #we display the complete portfolio's risk\n              output$minRisk2 <- renderText({\n                paste(\"Global Risk :\", round(MinVar_file[[3]] * 100, 2), \"%\")\n              })\n              output$optExpRet2 <- renderText({\n                paste(\"Expected Return :\", round(Optimal_file[[2]] * 100, 2), \"%\")\n              })\n              #we display the complete portfolio's risk\n              output$optRisk2 <- renderText({\n                paste(\"Global Risk :\", round(Optimal_file[[3]] * 100, 2), \"%\")\n              })\n              \n              output$displayFile <- renderUI({\n                h2(\"Report\")\n              })\n              \n              tableAssetsFile <- reactive({\n                names <- stock_names_files[2 : length(stock_names_files)]\n                tableAssets <- data.frame(rbind(round(c(Rf_file, stock_expectReturn) * 100, 2), round(c(0, sqrt(diag(cov_matrix_file))) * 100, 2)))\n                row_names <- c(\"Expected Return (%)\", \"Risk (%)\")\n                tableAssets <- cbind(row_names, tableAssets)\n                colnames(tableAssets) <- c(\"Info\", c(\"Risk Free Asset\",names))\n                tableAssets\n              })\n              \n              output$assetsTableFile <- renderDataTable({\n                tableAssetsFile()\n              })\n              \n              output$covarTableFile <- renderDataTable({\n                names <- stock_names_files[2 : length(stock_names_files)]\n                covar <- round(cov_matrix_file, 3)\n                covar <- cbind(names, covar)\n                colnames(covar) <- c(\"\", names)\n                covar\n              })\n            })\n          })\n        })\n      }\n    }\n  })\n})\n",
    "created" : 1465124177424.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2158039272",
    "id" : "CB2904E5",
    "lastKnownWriteTime" : 1464665813,
    "last_content_update" : 1464665813,
    "path" : "~/R/portfolio/portfolioTool/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}